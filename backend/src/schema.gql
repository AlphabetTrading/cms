# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Possible options for Approval Status"""
enum ApprovalStatus {
  COMPLETED
  DECLINED
  PENDING
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
  userId: String!
}

input CreateMaterialIssueInput {
  approvedById: String
  items: [CreateMaterialIssueItemInput!]!
  preparedById: String!
  projectId: String!
  requisitionNumber: String
}

input CreateMaterialIssueItemInput {
  productId: String!
  quantity: Float!
  remark: String
  totalCost: Float!
  unitCost: Float!
  unitOfMeasure: String!
}

input CreateMaterialReceiveInput {
  approvedById: String
  invoiceId: String!
  items: [CreateMaterialReceiveItemInput!]!
  materialRequestId: String!
  projectId: String!
  purchaseOrderId: String!
  purchasedById: String!
  supplierName: String!
}

input CreateMaterialReceiveItemInput {
  productId: String!
  quantity: Float!
  totalCost: Float!
  unitCost: Float!
  unitOfMeasure: String!
}

input CreateMaterialRequestInput {
  approvedById: String
  items: [CreateMaterialRequestItemInput!]!
  projectId: String!
  requestedById: String!
}

input CreateMaterialRequestItemInput {
  inStockQuantity: Float
  productId: String!
  quantity: Float!
  remark: String
  toBePurchasedQuantity: Float
  unitOfMeasure: String!
}

input CreateMaterialReturnInput {
  items: [CreateMaterialReturnItemInput!]!
  projectId: String!
  receivedById: String
  receivingStore: String!
  returnedById: String!
}

input CreateMaterialReturnItemInput {
  issueVoucherId: String!
  productId: String!
  quantity: Float!
  remark: String
  totalCost: Float!
  unitCost: Float!
  unitOfMeasure: String!
}

input CreateMilestoneInput {
  description: String
  dueDate: DateTime!
  name: String!
  projectId: String!
  status: String!
}

input CreatePriceHistoryInput {
  price: Float!
  productId: String!
}

input CreateProductInput {
  description: String
  name: String!
}

input CreateProformaInput {
  description: String!
  materialRequestId: String!
  photos: [String!]!
  projectId: String!
  vendor: String!
}

input CreateProjectInput {
  budget: Float!
  clientId: String!
  endDate: DateTime
  name: String!
  projectManagerId: String!
  projectUsers: [CreateProjectUserInput!]!
  startDate: DateTime!
  status: String!
}

input CreateProjectUserInput {
  projectId: String!
  userId: String!
}

input CreatePurchaseOrderInput {
  approvedById: String
  grandTotal: Float
  items: [CreatePurchaseOrderItemInput!]!
  materialRequestId: String!
  preparedById: String!
  projectId: String!
  subTotal: Float!
  supplierName: String!
  vat: Float
}

input CreatePurchaseOrderItemInput {
  productId: String!
  quantity: Float!
  remark: String
  totalPrice: Float!
  unitOfMeasure: String!
  unitPrice: Float!
}

input CreateTaskInput {
  assignedToId: String!
  description: String
  dueDate: DateTime!
  milestoneId: String!
  name: String!
  priority: String!
  startDate: DateTime!
  status: String!
}

input CreateUserInput {
  confirmPassword: String!
  email: String!
  fullName: String!
  password: String!
  phoneNumber: String!
  role: UserRole!
}

input CreateWarehouseProductInput {
  productId: String!
  quantity: Float
  warehouseId: String
}

input CreateWarehouseStoreInput {
  location: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

type DocumentTransaction {
  approvedCount: Float!
  declinedCount: Float!
  pendingCount: Float!
  type: DocumentType!
}

enum DocumentType {
  MATERIAL_ISSUE
  MATERIAL_RECEIVING
  MATERIAL_REQUEST
  MATERIAL_RETURN
  PURCHASE_ORDER
}

input FilterMaterialIssueInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  serialNumber: StringFilter
  status: String
}

input FilterMaterialReceiveInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  invoiceId: StringFilter
  materialRequest: FilterMaterialRequestInput
  materialRequestId: String
  project: FilterProjectInput
  projectId: String
  purchaseOrder: FilterPurchaseOrderInput
  purchaseOrderId: String
  purchasedBy: FilterUserDocumentsInput
  purchasedById: String
  serialNumber: StringFilter
  status: String
  supplierName: StringFilter
}

input FilterMaterialRequestInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  project: FilterProjectInput
  projectId: String
  requestedBy: FilterUserDocumentsInput
  requestedById: String
  serialNumber: StringFilter
  status: String
}

input FilterMaterialReturnInput {
  createdAt: DateTimeFilter
  id: String
  project: FilterProjectInput
  projectId: String
  receivedBy: FilterUserDocumentsInput
  receivedById: String
  receivingStore: StringFilter
  returnedBy: FilterUserDocumentsInput
  returnedById: String
  serialNumber: StringFilter
  status: ApprovalStatus
}

input FilterMilestoneInput {
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: String
  name: StringFilter
  projectId: StringFilter
  status: StringFilter
}

input FilterPriceHistoryInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
  productId: String
}

input FilterProductInput {
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
}

input FilterProformaInput {
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  materialRequestId: String
  project: FilterProjectInput
  projectId: String
  updatedAt: DateTimeFilter
  vendor: String
}

input FilterProjectInput {
  budget: NumberFilter
  clientId: StringFilter
  createdAt: DateTimeFilter
  endDate: DateTimeFilter
  id: String
  name: StringFilter
  projectManagerId: StringFilter
  startDate: DateTimeFilter
  status: StringFilter
}

input FilterPurchaseOrderInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  materialRequest: FilterMaterialRequestInput
  materialRequestId: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  serialNumber: StringFilter
  status: ApprovalStatus
  subTotal: NumberFilter
  supplierName: StringFilter
}

input FilterTaskInput {
  assignedToId: StringFilter
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: String
  milestoneId: StringFilter
  name: StringFilter
  priority: StringFilter
  startDate: DateTimeFilter
  status: StringFilter
}

input FilterUserDocumentsInput {
  createdAt: DateTimeFilter
  email: StringFilter
  fullName: StringFilter
  id: String
  phoneNumber: StringFilter
  role: StringFilter
}

input FilterWarehouseProductInput {
  createdAt: DateTimeFilter
  id: String
  product: FilterProductInput
  productId: String
  warehouse: FilterWarehouseStoreInput
  warehouseId: String
}

input FilterWarehouseStoreInput {
  createdAt: DateTimeFilter
  id: String
  location: StringFilter
  name: StringFilter
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  password: String!
  phone_number: String!
}

type MaterialIssueItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  materialIssueVoucherId: String
  productId: String
  quantity: Float
  remark: String
  totalCost: Float
  unitCost: Float
  unitOfMeasure: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialIssueVoucher {
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialIssueItem!]
  preparedBy: User
  preparedById: String
  project: Project
  projectId: String
  requisitionNumber: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReceiveVoucher {
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  invoiceId: String
  materialRequestId: String
  project: Project
  projectId: String
  purchaseOrderId: String
  purchasedBy: User
  purchasedById: String
  serialNumber: String
  status: ApprovalStatus
  supplierName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialRequestItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  inStockQuantity: Float
  productId: String
  quantity: Float
  remark: String
  toBePurchasedQuantity: Float
  unitOfMeasure: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialRequestVoucher {
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialRequestItem!]
  project: Project
  projectId: String
  requestedBy: User
  requestedById: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReturnItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  issueVoucherId: String
  materialReturnVoucherId: String
  productId: String
  quantityReturned: Float
  remark: String
  totalCost: Float
  unitCost: Float
  unitOfMeasure: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReturnVoucher {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialReturnItem!]!
  project: Project
  projectId: String
  receivedBy: User
  receivedById: String
  receivingStore: String
  returnedBy: User
  returnedById: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Milestone {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  dueDate: DateTime!
  id: ID!
  name: String!
  projectId: String!
  status: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Mutation {
  approveMaterialIssue(decision: ApprovalStatus!, materialIssueId: String!): MaterialIssueVoucher!
  approveMaterialReceive(decision: ApprovalStatus!, materialReceiveId: String!): MaterialReceiveVoucher!
  approveMaterialRequest(decision: ApprovalStatus!, materialRequestId: String!): MaterialRequestVoucher!
  approveMaterialReturn(decision: ApprovalStatus!, materialReturnId: String!): MaterialReturnVoucher!
  approvePurchaseOrder(decision: ApprovalStatus!, purchaseOrderId: String!): PurchaseOrderVoucher!
  createMaterialIssue(createMaterialIssueInput: CreateMaterialIssueInput!): MaterialIssueVoucher!
  createMaterialReceive(createMaterialReceiveInput: CreateMaterialReceiveInput!): MaterialReceiveVoucher!
  createMaterialRequest(createMaterialRequestInput: CreateMaterialRequestInput!): MaterialRequestVoucher!
  createMaterialReturn(createMaterialReturnInput: CreateMaterialReturnInput!): MaterialReturnVoucher!
  createMilestone(createMilestoneInput: CreateMilestoneInput!): Milestone!
  createPriceHistory(createPriceHistoryInput: CreatePriceHistoryInput!): PriceHistory!
  createProduct(createProductInput: CreateProductInput!): Product!
  createProforma(createProformaInput: CreateProformaInput!): Proforma!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createPurchaseOrder(createPurchaseOrderInput: CreatePurchaseOrderInput!): PurchaseOrderVoucher!
  createTask(createTaskInput: CreateTaskInput!): Task!
  createUser(createUser: CreateUserInput!): User!
  createWarehouseProduct(createWarehouseProductInput: CreateWarehouseProductInput!): WarehouseProduct!
  createWarehouseStore(createWarehouseStoreInput: CreateWarehouseStoreInput!): WarehouseStore!
  deleteFile(url: String!): Boolean!
  deleteMaterialIssue(id: String!): MaterialIssueVoucher!
  deleteMaterialReceive(id: String!): MaterialReceiveVoucher!
  deleteMaterialRequest(id: String!): MaterialRequestVoucher!
  deleteMaterialReturn(id: String!): MaterialReturnVoucher!
  deleteMilestone(id: String!): Milestone!
  deletePriceHistory(id: String!): PriceHistory!
  deleteProduct(id: String!): Product!
  deleteProforma(id: String!): Proforma!
  deleteProject(id: String!): Project!
  deletePurchaseOrder(id: String!): PurchaseOrderVoucher!
  deleteTask(id: String!): Task!
  deleteUser(email: String!): User!
  deleteWarehouseProduct(id: String!): WarehouseProduct!
  deleteWarehouseStore(id: String!): WarehouseStore!
  login(data: LoginInput!): Auth!
  refreshToken(refreshToken: JWT!): Token!
  updateMaterialIssue(id: String!, updateMaterialIssueInput: UpdateMaterialIssueInput!): MaterialIssueVoucher!
  updateMaterialReceive(id: String!, updateMaterialReceiveInput: UpdateMaterialReceiveInput!): MaterialReceiveVoucher!
  updateMaterialRequest(id: String!, updateMaterialRequestInput: UpdateMaterialRequestInput!): MaterialRequestVoucher!
  updateMaterialReturn(id: String!, updateMaterialReturnInput: UpdateMaterialReturnInput!): MaterialReturnVoucher!
  updateMilestone(id: String!, updateMilestoneInput: UpdateMilestoneInput!): Milestone!
  updatePriceHistory(id: String!, updatePriceHistoryInput: UpdatePriceHistoryInput!): PriceHistory!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): Product!
  updateProforma(id: String!, updateProformaInput: UpdateProformaInput!): Proforma!
  updateProject(id: String!, updateProjectInput: UpdateProjectInput!): Project!
  updatePurchaseOrder(id: String!, updatePurchaseOrderInput: UpdatePurchaseOrderInput!): PurchaseOrderVoucher!
  updateTask(id: String!, updateTaskInput: UpdateTaskInput!): Task!
  updateUser(email: String!, updateUser: UpdateUserInput!): User!
  updateWarehouseProduct(id: String!, updateWarehouseProductInput: UpdateWarehouseProductInput!): WarehouseProduct!
  updateWarehouseStore(id: String!, updateWarehouseStoreInput: UpdateWarehouseStoreInput!): WarehouseStore!
  uploadFile(file: Upload!): String!
}

input NumberFilter {
  equals: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

input OrderByMaterialIssueInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialReceiveInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialRequestInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialReturnInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMilestoneInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByPriceHistoryInput {
  createdAt: OrderDirection
  price: OrderDirection
  product: OrderByProductInput
  updatedAt: OrderDirection
}

input OrderByProductInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByProformaInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByProjectInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByPurchaseOrderInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByTaskInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByWarehouseProductInput {
  createdAt: OrderDirection
  product: OrderByProductInput
  quantity: OrderDirection
  updatedAt: OrderDirection
  warehouse: OrderByWarehouseStoreInput
}

input OrderByWarehouseStoreInput {
  createdAt: OrderDirection
  location: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PaginationInfo {
  count: Int
  limit: Int
  page: Int
}

input PaginationInput {
  skip: Int
  take: Int
}

type PaginationMaterialIssues {
  items: [MaterialIssueVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialReceives {
  items: [MaterialReceiveVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialRequests {
  items: [MaterialRequestVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialReturns {
  items: [MaterialReturnVoucher!]!
  meta: PaginationInfo
}

type PaginationMilestones {
  items: [Milestone!]!
  meta: PaginationInfo
}

type PaginationPriceHistories {
  items: [PriceHistory!]!
  meta: PaginationInfo
}

type PaginationProducts {
  items: [Product!]!
  meta: PaginationInfo
}

type PaginationProformas {
  items: [Proforma!]!
  meta: PaginationInfo
}

type PaginationProjects {
  items: [Project!]!
  meta: PaginationInfo
}

type PaginationPurchaseOrders {
  items: [PurchaseOrderVoucher!]!
  meta: PaginationInfo
}

type PaginationTasks {
  items: [Task!]!
  meta: PaginationInfo
}

type PaginationWarehouseProducts {
  items: [WarehouseProduct!]!
  meta: PaginationInfo
}

type PaginationWarehouseStores {
  items: [WarehouseStore!]!
  meta: PaginationInfo
}

type PriceHistory {
  price: Float!
  product: Product!
  productId: String!
}

type Product {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Proforma {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  materialRequestId: String!
  photos: [String!]!
  projectId: String
  serialNumber: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  vendor: String!
}

type Project {
  budget: Float!
  clientId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  endDate: DateTime
  id: ID!
  name: String!
  projectManagerId: String!
  projectUsers: [ProjectUser!]!
  startDate: DateTime!
  status: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ProjectUser {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  projectId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: String
}

type PurchaseOrderItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  productId: String
  purchaseOrderId: String
  quantityRequested: Float
  remark: String
  totalPrice: Float
  unitOfMeasure: String
  unitPrice: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PurchaseOrderVoucher {
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  grandTotal: Float
  id: ID!
  items: [PurchaseOrderItem!]
  materialRequestId: String
  preparedById: String
  project: Project
  projectId: String
  serialNumber: String
  status: ApprovalStatus
  subTotal: Float
  supplierName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  vat: Float
}

type Query {
  getAllDocumentsStatus(projectId: String!): [DocumentTransaction!]!
  getMaterialIssueById(id: String!): MaterialIssueVoucher!
  getMaterialIssues(filterMaterialIssueInput: FilterMaterialIssueInput, orderBy: OrderByMaterialIssueInput, paginationInput: PaginationInput): PaginationMaterialIssues!
  getMaterialReceiveById(id: String!): MaterialReceiveVoucher!
  getMaterialReceives(filterMaterialReceiveInput: FilterMaterialReceiveInput, orderBy: OrderByMaterialReceiveInput, paginationInput: PaginationInput): PaginationMaterialReceives!
  getMaterialRequestById(id: String!): MaterialRequestVoucher!
  getMaterialRequests(filterMaterialRequestInput: FilterMaterialRequestInput, orderBy: OrderByMaterialRequestInput, paginationInput: PaginationInput): PaginationMaterialRequests!
  getMaterialReturnById(id: String!): MaterialReturnVoucher!
  getMaterialReturns(filterMaterialReturnInput: FilterMaterialReturnInput, orderBy: OrderByMaterialReturnInput, paginationInput: PaginationInput): PaginationMaterialReturns!
  getMilestone(id: String!): Milestone!
  getMilestones(filterMilestoneInput: FilterMilestoneInput, orderBy: OrderByMilestoneInput, paginationInput: PaginationInput): PaginationMilestones!
  getPriceHistory(id: String!): PriceHistory!
  getProduct(id: String!): Product!
  getProductPriceHistories(filterPriceHistoryInput: FilterPriceHistoryInput, orderBy: OrderByPriceHistoryInput, paginationInput: PaginationInput): PaginationPriceHistories!
  getProducts(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProducts!
  getProformaById(id: String!): Proforma!
  getProformas(filterProformaInput: FilterProformaInput, orderBy: OrderByProformaInput, paginationInput: PaginationInput): PaginationProformas!
  getProject(id: String!): Project!
  getProjects(filterProjectInput: FilterProjectInput, orderBy: OrderByProjectInput, paginationInput: PaginationInput): PaginationProjects!
  getPurchaseOrderById(id: String!): PurchaseOrderVoucher!
  getPurchaseOrders(filterPurchaseOrderInput: FilterPurchaseOrderInput, orderBy: OrderByPurchaseOrderInput, paginationInput: PaginationInput): PaginationPurchaseOrders!
  getTask(id: String!): Task!
  getTasks(filterTaskInput: FilterTaskInput, orderBy: OrderByTaskInput, paginationInput: PaginationInput): PaginationTasks!
  getUserByEmail(email: String!): User!
  getUserByPhoneNumber(phone_number: String!): User!
  getUsers: [User!]!
  getWarehouseProduct(id: String!): WarehouseProduct!
  getWarehouseProducts(filterWarehouseProductInput: FilterWarehouseProductInput, orderBy: OrderByWarehouseProductInput, paginationInput: PaginationInput): PaginationWarehouseProducts!
  getWarehouseStore(id: String!): WarehouseStore!
  getWarehouseStores(filterWarehouseStoreInput: FilterWarehouseStoreInput, orderBy: OrderByWarehouseStoreInput, paginationInput: PaginationInput): PaginationWarehouseStores!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  mode: String = "insensitive"
  not: String
  startsWith: String
}

type Task {
  assignedToId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  dueDate: DateTime!
  id: ID!
  milestoneId: String!
  name: String!
  priority: String!
  startDate: DateTime!
  status: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateMaterialIssueInput {
  approved: ApprovalStatus
  approvedById: String
  items: [UpdateMaterialIssueItemInput!]
  preparedById: String
  projectId: String
  requisitionNumber: String
}

input UpdateMaterialIssueItemInput {
  productId: String
  quantity: Float
  remark: String
  totalCost: Float
  unitCost: Float
  unitOfMeasure: String
}

input UpdateMaterialReceiveInput {
  approvedById: String
  invoiceId: String
  items: [UpdateMaterialReceiveItemInput!]
  materialRequestId: String
  projectId: String
  purchaseOrderId: String
  purchasedById: String
  status: ApprovalStatus
  supplierName: String
}

input UpdateMaterialReceiveItemInput {
  productId: String
  quantity: Float
  totalCost: Float
  unitCost: Float
  unitOfMeasure: String
}

input UpdateMaterialRequestInput {
  approvedById: String
  items: [UpdateMaterialRequestItemInput!]
  projectId: String
  requestedById: String
  status: ApprovalStatus
}

input UpdateMaterialRequestItemInput {
  inStockQuantity: Float
  productId: String
  quantity: Float
  remark: String
  toBePurchasedQuantity: Float
  unitOfMeasure: String
}

input UpdateMaterialReturnInput {
  items: [UpdateMaterialReturnItemInput!]
  projectId: String
  receivedById: String
  receivingStore: String
  returnedById: String
  status: String
}

input UpdateMaterialReturnItemInput {
  issueVoucherId: String
  productId: String
  quantity: Float
  remark: String
  totalCost: Float
  unitCost: Float
  unitOfMeasure: String
}

input UpdateMilestoneInput {
  description: String
  dueDate: DateTime
  name: String
  projectId: String
  status: String
}

input UpdatePriceHistoryInput {
  price: Float
  productId: String
}

input UpdateProductInput {
  description: String
  name: String
}

input UpdateProformaInput {
  description: String
  materialRequestId: String
  photos: [String!]!
  projectId: String
  vendor: String
}

input UpdateProjectInput {
  budget: Float
  clientId: String
  endDate: DateTime
  name: String
  projectManagerId: String
  projectUsers: [UpdateProjectUserInput!]
  startDate: DateTime
  status: String
}

input UpdateProjectUserInput {
  projectId: String
  userId: String
}

input UpdatePurchaseOrderInput {
  approvedById: String
  grandTotal: Float
  items: [UpdatePurchaseOrderItemInput!]!
  materialRequestId: String
  preparedById: String
  projectId: String
  status: ApprovalStatus
  subTotal: Float
  supplierName: String
  vat: Float
}

input UpdatePurchaseOrderItemInput {
  productId: String
  quantity: Float
  quantityRequested: Float
  remark: String
  totalPrice: Float
  unitOfMeasure: String
  unitPrice: Float
}

input UpdateTaskInput {
  assignedToId: String
  description: String
  dueDate: DateTime
  milestoneId: String
  name: String
  priority: String
  startDate: DateTime
  status: String
}

input UpdateUserInput {
  confirmPassword: String
  email: String
  fullName: String
  password: String
  phoneNumber: String
  role: UserRole
}

input UpdateWarehouseProductInput {
  productId: String
  quantity: Float
  warehouseId: String
}

input UpdateWarehouseStoreInput {
  location: String
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  fullName: String!
  id: ID!
  phoneNumber: String!
  role: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

enum UserRole {
  CLIENT
  CONSULTANT
  PROJECT_MANAGER
  PURCHASER
  SITE_MANAGER
  STORE_MANAGER
}

type WarehouseProduct {
  product: Product!
  productId: String!
  quantity: Float!
  warehouse: WarehouseStore!
  warehouseId: String
}

type WarehouseStore {
  location: String!
  name: String!
}