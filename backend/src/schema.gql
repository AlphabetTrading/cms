# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Possible options for Approval Status"""
enum ApprovalStatus {
  COMPLETED
  DECLINED
  PENDING
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
  userId: String!
}

type Company {
  address: String
  contactInfo: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  employees: [User!]
  id: ID!
  name: String
  owner: User
  ownerId: String
  projects: [Project!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseStores: [WarehouseStore!]
}

enum CompletionStatus {
  COMPLETED
  ONGOING
  TODO
}

input CreateCompanyInput {
  address: String!
  contactInfo: String!
  name: String!
  ownerId: String!
}

input CreateDailySiteDataInput {
  approvedById: String
  checkedById: String
  contractor: String
  date: DateTime!
  preparedById: String!
  projectId: String!
  tasks: [CreateDailySiteDataTaskInput!]!
}

input CreateDailySiteDataTaskInput {
  description: String!
  executedQuantity: Float
  laborDetails: [CreateDailySiteDataTaskLaborInput!]!
  materialDetails: [CreateDailySiteDataTaskMaterialInput!]!
  unit: String
}

input CreateDailySiteDataTaskLaborInput {
  afternoon: Float
  morning: Float
  number: Float!
  overtime: Float
  trade: String!
}

input CreateDailySiteDataTaskMaterialInput {
  productVariantId: String!
  quantityUsed: Float!
  quantityWasted: Float
}

input CreateMaterialIssueInput {
  approvedById: String
  items: [CreateMaterialIssueItemInput!]!
  preparedById: String!
  projectId: String!
  requisitionNumber: String
  warehouseStoreId: String!
}

input CreateMaterialIssueItemInput {
  productVariantId: String!
  quantity: Float!
  remark: String
  subStructureDescription: SubStructureUseDescription
  superStructureDescription: SuperStructureUseDescription
  totalCost: Float!
  unitCost: Float!
  useType: UseType!
}

input CreateMaterialReceiveInput {
  approvedById: String
  invoiceId: String!
  items: [CreateMaterialReceiveItemInput!]!
  materialRequestId: String!
  projectId: String!
  purchaseOrderId: String!
  purchasedById: String!
  supplierName: String!
}

input CreateMaterialReceiveItemInput {
  loadingCost: Float!
  productVariantId: String!
  quantity: Float!
  totalCost: Float!
  transportationCost: Float!
  unitCost: Float!
  unloadingCost: Float!
}

input CreateMaterialRequestInput {
  approvedById: String
  items: [CreateMaterialRequestItemInput!]!
  projectId: String!
  requestedById: String!
}

input CreateMaterialRequestItemInput {
  productVariantId: String!
  quantity: Float!
  remark: String
}

input CreateMaterialReturnInput {
  items: [CreateMaterialReturnItemInput!]!
  projectId: String!
  receivedById: String
  receivingWarehouseStoreId: String!
  returnedById: String!
}

input CreateMaterialReturnItemInput {
  issueVoucherId: String!
  productVariantId: String!
  quantity: Float!
  remark: String
  totalCost: Float!
  unitCost: Float!
}

input CreateMaterialTransferInput {
  approvedById: String
  items: [CreateMaterialTransferItemInput!]!
  materialGroup: String
  materialReceiveId: String!
  preparedById: String!
  projectId: String!
  receivingWarehouseStoreId: String
  requisitionNumber: String
  sendingWarehouseStoreId: String
  sentThroughName: String
  vehiclePlateNo: String
}

input CreateMaterialTransferItemInput {
  productVariantId: String!
  quantityRequested: Float
  quantityTransferred: Float!
  remark: String
  totalCost: Float!
  unitCost: Float!
}

input CreateMilestoneInput {
  createdById: String!
  description: String
  dueDate: DateTime!
  name: String!
  projectId: String!
  stage: UseType!
}

input CreateOwnerInput {
  email: String!
  fullName: String!
  phoneNumber: String!
}

input CreatePriceHistoryInput {
  price: Float!
  productVariantId: String!
  projectId: String!
}

input CreateProductInput {
  name: String!
  productType: String!
}

input CreateProductVariantInput {
  description: String
  productId: String!
  unitOfMeasure: UnitOfMeasure!
  variant: String!
}

input CreateProformaInput {
  approvedById: String
  materialRequestItemId: String!
  photo: String!
  preparedById: String!
  projectId: String!
  remark: String
  vendor: String!
}

input CreateProjectInput {
  budget: Float!
  companyId: String!
  endDate: DateTime
  name: String!
  projectUsers: [CreateProjectUserInput!]!
  startDate: DateTime!
  status: String!
}

input CreateProjectUserInput {
  projectId: String!
  userId: String!
}

input CreatePurchaseOrderInput {
  approvedById: String
  grandTotal: Float
  items: [CreatePurchaseOrderItemInput!]!
  materialRequestId: String!
  preparedById: String!
  projectId: String!
  subTotal: Float!
  supplierName: String!
  vat: Float
}

input CreatePurchaseOrderItemInput {
  productVariantId: String!
  quantity: Float!
  remark: String
  totalPrice: Float!
  unitPrice: Float!
}

input CreateTaskInput {
  assignedToId: String!
  description: String
  dueDate: DateTime!
  milestoneId: String!
  name: String!
  priority: Priority!
  status: CompletionStatus!
}

input CreateUserInput {
  companyId: String!
  email: String!
  fullName: String!
  phoneNumber: String!
  role: UserRole!
}

input CreateWarehouseProductInput {
  currentPrice: Float!
  productVariantId: String!
  projectId: String!
  quantity: Float!
  warehouseId: String!
}

input CreateWarehouseStoreInput {
  companyId: String!
  location: String!
  name: String!
  warehouseStoreManagerIds: [CreateWarehouseStoreManagerInput!]
}

input CreateWarehouseStoreManagerInput {
  storeManagerId: String!
}

type DailySiteData {
  Project: Project
  approvedBy: User
  approvedById: String
  checkedBy: User
  checkedById: String
  contractor: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  date: DateTime
  id: ID!
  preparedBy: User
  preparedById: String
  projectId: String
  status: ApprovalStatus
  tasks: [DailySiteDataTask!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type DailySiteDataTask {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dailySiteData: DailySiteData
  dailySiteDataId: String
  description: String
  executedQuantity: Float
  id: ID!
  laborDetails: [DailySiteDataTaskLabor!]
  materialDetails: [DailySiteDataTaskMaterial!]
  unit: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type DailySiteDataTaskLabor {
  afternoon: Float

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dailySiteDataTask: DailySiteDataTask
  dailySiteDataTaskId: String
  id: ID!
  morning: Float
  number: Float
  overtime: Float
  trade: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type DailySiteDataTaskMaterial {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dailySiteDataTask: DailySiteDataTask
  dailySiteDataTaskId: String
  id: ID!
  productVariant: ProductVariant
  productVariantId: String
  quantityUsed: Float
  quantityWasted: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type DailyStockBalance {
  Project: Project
  changes: JSONObject!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  projectId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

type DocumentTransaction {
  approvedCount: Float!
  declinedCount: Float!
  pendingCount: Float!
  type: DocumentType!
}

enum DocumentType {
  DAILY_SITE_DATA
  MATERIAL_ISSUE
  MATERIAL_RECEIVING
  MATERIAL_REQUEST
  MATERIAL_RETURN
  MATERIAL_TRANSFER
  PROFORMA
  PURCHASE_ORDER
}

input FilterCompanyInput {
  address: StringFilter
  contactInfo: StringFilter
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
  owner: FilterUserDocumentsInput
  ownerId: String
}

input FilterDailySiteDataInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  checkedBy: FilterUserDocumentsInput
  checkedById: String
  contractor: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  status: [ApprovalStatus!]
}

input FilterDailyStockBalanceInput {
  createdAt: DateTimeFilter
  id: String
  project: FilterProjectInput
  projectId: String
  updatedAt: DateTimeFilter
}

input FilterMaterialIssueInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  serialNumber: StringFilter
  status: [ApprovalStatus!]
  warehouseStore: FilterWarehouseStoreInput
  warehouseStoreId: String
}

input FilterMaterialReceiveInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  invoiceId: StringFilter
  materialRequest: FilterMaterialRequestInput
  materialRequestId: String
  project: FilterProjectInput
  projectId: String
  purchaseOrder: FilterPurchaseOrderInput
  purchaseOrderId: String
  purchasedBy: FilterUserDocumentsInput
  purchasedById: String
  serialNumber: StringFilter
  status: [ApprovalStatus!]
  supplierName: StringFilter
}

input FilterMaterialRequestInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  project: FilterProjectInput
  projectId: String
  requestedBy: FilterUserDocumentsInput
  requestedById: String
  serialNumber: StringFilter
  status: [ApprovalStatus!]
}

input FilterMaterialReturnInput {
  createdAt: DateTimeFilter
  id: String
  project: FilterProjectInput
  projectId: String
  receivedBy: FilterUserDocumentsInput
  receivedById: String
  receivingWarehouseStore: FilterWarehouseProductInput
  receivingWarehouseStoreId: String
  returnedBy: FilterUserDocumentsInput
  returnedById: String
  serialNumber: StringFilter
  status: ApprovalStatus
}

input FilterMaterialTransferInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  receivingWarehouseStore: FilterWarehouseStoreInput
  receivingWarehouseStoreId: String
  sendingWarehouseStore: FilterWarehouseStoreInput
  sendingWarehouseStoreId: String
  serialNumber: StringFilter
  status: [ApprovalStatus!]
}

input FilterMilestoneInput {
  createdAt: DateTimeFilter
  createdBy: FilterUserDocumentsInput
  createdById: String
  dueDate: DateTimeFilter
  id: String
  name: StringFilter
  project: FilterProjectInput
  projectId: String
  stage: UseType
}

input FilterPriceHistoryInput {
  createdAt: DateTimeFilter
  id: String
  productVariant: FilterProductVariantInput
  productVariantId: String
  project: FilterProjectInput
  projectId: String
}

input FilterProductInput {
  createdAt: DateTimeFilter
  id: String
  name: StringFilter
}

input FilterProductVariantInput {
  createdAt: DateTimeFilter
  id: String
  productId: String
  variant: StringFilter
}

input FilterProformaInput {
  createdAt: DateTimeFilter
  id: String
  materialRequestItemId: String
  project: FilterProjectInput
  projectId: String
  remark: StringFilter
  updatedAt: DateTimeFilter
  vendor: String
}

input FilterProjectInput {
  budget: NumberFilter
  company: FilterCompanyInput
  companyId: String
  createdAt: DateTimeFilter
  endDate: DateTimeFilter
  id: String
  name: StringFilter
  startDate: DateTimeFilter
  status: StringFilter
}

input FilterPurchaseOrderInput {
  approvedBy: FilterUserDocumentsInput
  approvedById: String
  createdAt: DateTimeFilter
  id: String
  materialRequest: FilterMaterialRequestInput
  materialRequestId: String
  preparedBy: FilterUserDocumentsInput
  preparedById: String
  project: FilterProjectInput
  projectId: String
  serialNumber: StringFilter
  status: [ApprovalStatus!]
  subTotal: NumberFilter
  supplierName: StringFilter
}

input FilterTaskInput {
  assignedToId: String
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: String
  milestoneId: String
  name: StringFilter
  priority: [Priority!]
  status: [CompletionStatus!]
}

input FilterUserDocumentsInput {
  company: FilterCompanyInput
  companyId: String
  createdAt: DateTimeFilter
  email: StringFilter
  fullName: StringFilter
  id: String
  phoneNumber: StringFilter
  role: StringFilter
}

input FilterWarehouseProductInput {
  createdAt: DateTimeFilter
  id: String
  productVariant: FilterProductVariantInput
  productVariantId: String
  project: FilterProjectInput
  projectId: String
  warehouse: FilterWarehouseStoreInput
  warehouseId: String
}

input FilterWarehouseStoreInput {
  company: FilterCompanyInput
  companyId: String
  createdAt: DateTimeFilter
  id: String
  location: StringFilter
  name: StringFilter
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  password: String!
  phone_number: String!
}

type MaterialIssueItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  materialIssueVoucherId: String
  productVariant: ProductVariant
  productVariantId: String
  quantity: Float
  remark: String
  subStructureDescription: SubStructureUseDescription
  superStructureDescription: SuperStructureUseDescription
  totalCost: Float
  unitCost: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  useType: UseType
}

type MaterialIssueVoucher {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialIssueItem!]
  preparedBy: User
  preparedById: String
  projectId: String
  requisitionNumber: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseStore: WarehouseStore
  warehouseStoreId: String
}

type MaterialReceiveItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  loadingCost: Float
  materialReceiveVoucherId: String
  productVariant: ProductVariant
  productVariantId: String
  quantity: Float
  totalCost: Float
  transportationCost: Float
  unitCost: Float
  unloadingCost: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReceiveVoucher {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  invoiceId: String
  items: [MaterialReceiveItem!]
  materialRequest: MaterialRequestVoucher
  materialRequestId: String
  projectId: String
  purchaseOrder: PurchaseOrderVoucher
  purchaseOrderId: String
  purchasedBy: User
  purchasedById: String
  serialNumber: String
  status: ApprovalStatus
  supplierName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialRequestItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  productVariant: ProductVariant
  productVariantId: String
  proformas: [Proforma!]
  quantity: Float
  remark: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialRequestVoucher {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialRequestItem!]
  projectId: String
  requestedBy: User
  requestedById: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReturnItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  issueVoucher: MaterialIssueVoucher
  issueVoucherId: String
  materialReturnVoucherId: String
  productVariant: ProductVariant
  productVariantId: String
  quantity: Float
  remark: String
  totalCost: Float
  unitCost: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialReturnVoucher {
  Project: Project

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialReturnItem!]!
  projectId: String
  receivedBy: User
  receivedById: String
  receivingWarehouseStore: WarehouseStore
  receivingWarehouseStoreId: String
  returnedBy: User
  returnedById: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialTransferItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  materialTransferVoucherId: String
  productVariant: ProductVariant
  productVariantId: String
  quantityRequested: Float
  quantityTransferred: Float
  remark: String
  totalCost: Float
  unitCost: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MaterialTransferVoucher {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  items: [MaterialTransferItem!]
  materialGroup: String
  materialReceive: MaterialReceiveVoucher
  materialReceiveId: String
  preparedBy: User
  preparedById: String
  projectId: String
  receivingWarehouseStore: WarehouseStore
  receivingWarehouseStoreId: String
  requisitionNumber: String
  sendingStore: String
  sendingWarehouseStore: WarehouseStore
  sendingWarehouseStoreId: String
  sentThroughName: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  vehiclePlateNo: String
}

type Milestone {
  Project: Project
  Tasks: [Task!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  createdBy: User
  createdById: String
  description: String
  dueDate: DateTime
  id: ID!
  name: String
  progress: Float
  projectId: String
  stage: UseType

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Mutation {
  approveDailySiteData(dailySiteDataId: String!, decision: ApprovalStatus!): DailySiteData!
  approveMaterialIssue(decision: ApprovalStatus!, materialIssueId: String!): MaterialIssueVoucher!
  approveMaterialReceive(decision: ApprovalStatus!, materialReceiveId: String!): MaterialReceiveVoucher!
  approveMaterialRequest(decision: ApprovalStatus!, materialRequestId: String!): MaterialRequestVoucher!
  approveMaterialReturn(decision: ApprovalStatus!, materialReturnId: String!): MaterialReturnVoucher!
  approveMaterialTransfer(decision: ApprovalStatus!, materialTransferId: String!): MaterialTransferVoucher!
  approveProforma(decision: ApprovalStatus!, proformaId: String!): Proforma!
  approvePurchaseOrder(decision: ApprovalStatus!, purchaseOrderId: String!): PurchaseOrderVoucher!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createCompanyOwner(createOwner: CreateOwnerInput!): User!
  createDailySiteData(createDailySiteDataInput: CreateDailySiteDataInput!): DailySiteData!
  createMaterialIssue(createMaterialIssueInput: CreateMaterialIssueInput!): MaterialIssueVoucher!
  createMaterialReceive(createMaterialReceiveInput: CreateMaterialReceiveInput!): MaterialReceiveVoucher!
  createMaterialRequest(createMaterialRequestInput: CreateMaterialRequestInput!): MaterialRequestVoucher!
  createMaterialReturn(createMaterialReturnInput: CreateMaterialReturnInput!): MaterialReturnVoucher!
  createMaterialTransfer(createMaterialTransferInput: CreateMaterialTransferInput!): MaterialTransferVoucher!
  createMilestone(createMilestoneInput: CreateMilestoneInput!): Milestone!
  createPriceHistory(createPriceHistoryInput: CreatePriceHistoryInput!): PriceHistory!
  createProduct(createProductInput: CreateProductInput!): Product!
  createProductVariant(createProductVariantInput: CreateProductVariantInput!): ProductVariant!
  createProforma(createProformaInput: CreateProformaInput!): Proforma!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createPurchaseOrder(createPurchaseOrderInput: CreatePurchaseOrderInput!): PurchaseOrderVoucher!
  createTask(createTaskInput: CreateTaskInput!): Task!
  createUser(createUser: CreateUserInput!): User!
  createWarehouseProduct(createWarehouseProductInput: CreateWarehouseProductInput!): WarehouseProduct!
  createWarehouseStore(createWarehouseStoreInput: CreateWarehouseStoreInput!): WarehouseStore!
  deleteCompany(id: String!): Company!
  deleteDailySiteData(id: String!): DailySiteData!
  deleteFile(url: String!): Boolean!
  deleteMaterialIssue(id: String!): MaterialIssueVoucher!
  deleteMaterialReceive(id: String!): MaterialReceiveVoucher!
  deleteMaterialRequest(id: String!): MaterialRequestVoucher!
  deleteMaterialReturn(id: String!): MaterialReturnVoucher!
  deleteMaterialTransfer(id: String!): MaterialTransferVoucher!
  deleteMilestone(id: String!): Milestone!
  deletePriceHistory(id: String!): PriceHistory!
  deleteProduct(id: String!): Product!
  deleteProductVariant(id: String!): ProductVariant!
  deleteProforma(id: String!): Proforma!
  deleteProject(id: String!): Project!
  deletePurchaseOrder(id: String!): PurchaseOrderVoucher!
  deleteTask(id: String!): Task!
  deleteUser(email: String!): User!
  deleteWarehouseProduct(id: String!): WarehouseProduct!
  deleteWarehouseStore(id: String!): WarehouseStore!
  login(data: LoginInput!): Auth!
  refreshToken(refreshToken: JWT!): Token!
  register(registerUser: RegistrationInput!): User!
  updateCompany(id: String!, updateCompanyInput: UpdateCompanyInput!): Company!
  updateDailySiteData(updateDailySiteDataInput: UpdateDailySiteDataInput!): DailySiteData!
  updateMaterialIssue(updateMaterialIssueInput: UpdateMaterialIssueInput!): MaterialIssueVoucher!
  updateMaterialReceive(updateMaterialReceiveInput: UpdateMaterialReceiveInput!): MaterialReceiveVoucher!
  updateMaterialRequest(updateMaterialRequestInput: UpdateMaterialRequestInput!): MaterialRequestVoucher!
  updateMaterialReturn(updateMaterialReturnInput: UpdateMaterialReturnInput!): MaterialReturnVoucher!
  updateMaterialTransfer(updateMaterialTransferInput: UpdateMaterialTransferInput!): MaterialTransferVoucher!
  updateMilestone(updateMilestoneInput: UpdateMilestoneInput!): Milestone!
  updatePriceHistory(id: String!, updatePriceHistoryInput: UpdatePriceHistoryInput!): PriceHistory!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): Product!
  updateProductVariant(id: String!, updateProductVariantInput: UpdateProductVariantInput!): ProductVariant!
  updateProforma(updateProformaInput: UpdateProformaInput!): Proforma!
  updateProject(id: String!, updateProjectInput: UpdateProjectInput!): Project!
  updatePurchaseOrder(updatePurchaseOrderInput: UpdatePurchaseOrderInput!): PurchaseOrderVoucher!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  updateUser(email: String!, updateUser: UpdateUserInput!): User!
  updateWarehouseProduct(id: String!, updateWarehouseProductInput: UpdateWarehouseProductInput!): WarehouseProduct!
  updateWarehouseStore(id: String!, updateWarehouseStoreInput: UpdateWarehouseStoreInput!): WarehouseStore!
  uploadFile(file: Upload!): String!
}

input NumberFilter {
  equals: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

input OrderByCompanyInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByDailySiteDataInput {
  createdAt: OrderDirection
  date: OrderDirection
  updatedAt: OrderDirection
}

input OrderByDailyStockBalanceInput {
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialIssueInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialReceiveInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialRequestInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialReturnInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMaterialTransferInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByMilestoneInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByPriceHistoryInput {
  createdAt: OrderDirection
  price: OrderDirection
  productVariant: OrderByProductVariantInput
  project: OrderByProjectInput
  updatedAt: OrderDirection
}

input OrderByProductInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByProductVariantInput {
  createdAt: OrderDirection
  updatedAt: OrderDirection
  variant: OrderDirection
}

input OrderByProformaInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByProjectInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByPurchaseOrderInput {
  createdAt: OrderDirection
  serialNumber: OrderDirection
  updatedAt: OrderDirection
}

input OrderByTaskInput {
  createdAt: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

input OrderByWarehouseProductInput {
  createdAt: OrderDirection
  currentPrice: OrderDirection
  productVariant: OrderByProductVariantInput
  project: OrderByProjectInput
  quantity: OrderDirection
  updatedAt: OrderDirection
  warehouse: OrderByWarehouseStoreInput
}

input OrderByWarehouseStoreInput {
  createdAt: OrderDirection
  location: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PaginationCompanies {
  items: [Company!]!
  meta: PaginationInfo
}

type PaginationDailySiteData {
  items: [DailySiteData!]!
  meta: PaginationInfo
}

type PaginationDailyStockBalances {
  items: [DailyStockBalance!]!
  meta: PaginationInfo
}

type PaginationInfo {
  count: Int
  limit: Int
  page: Int
}

input PaginationInput {
  skip: Int
  take: Int
}

type PaginationMaterialIssues {
  items: [MaterialIssueVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialReceives {
  items: [MaterialReceiveVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialRequests {
  items: [MaterialRequestVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialReturns {
  items: [MaterialReturnVoucher!]!
  meta: PaginationInfo
}

type PaginationMaterialTransfers {
  items: [MaterialTransferVoucher!]!
  meta: PaginationInfo
}

type PaginationMilestones {
  items: [Milestone!]!
  meta: PaginationInfo
}

type PaginationPriceHistories {
  items: [PriceHistory!]!
  meta: PaginationInfo
}

type PaginationProductVariants {
  items: [ProductVariant!]!
  meta: PaginationInfo
}

type PaginationProducts {
  items: [Product!]!
  meta: PaginationInfo
}

type PaginationProformas {
  items: [Proforma!]!
  meta: PaginationInfo
}

type PaginationProjects {
  items: [Project!]!
  meta: PaginationInfo
}

type PaginationPurchaseOrders {
  items: [PurchaseOrderVoucher!]!
  meta: PaginationInfo
}

type PaginationTasks {
  items: [Task!]!
  meta: PaginationInfo
}

type PaginationWarehouseProducts {
  items: [WarehouseProduct!]!
  meta: PaginationInfo
}

type PaginationWarehouseStores {
  items: [WarehouseStore!]!
  meta: PaginationInfo
}

type PriceHistory {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  price: Float
  productVariant: ProductVariant
  productVariantId: String
  project: Project
  projectId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

enum Priority {
  CRITICAL
  HIGH
  LOW
  MEDIUM
}

type Product {
  ProductVariant: [ProductVariant!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String
  productType: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ProductVariant {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  product: Product
  productId: String
  unitOfMeasure: UnitOfMeasure

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  variant: String
}

type Proforma {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  materialRequestItem: MaterialRequestItem
  materialRequestItemId: String
  photo: String
  preparedBy: User
  preparedById: String
  projectId: String
  remark: String
  serialNumber: String
  status: ApprovalStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  vendor: String
}

type Project {
  Milestones: [Milestone!]
  ProjectUsers: [ProjectUser!]
  budget: Float
  company: Company
  companyId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  endDate: DateTime
  id: ID!
  name: String
  startDate: DateTime
  status: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ProjectUser {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  projectId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userId: String
}

type PurchaseOrderItem {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  productVariant: ProductVariant
  productVariantId: String
  purchaseOrderId: String
  quantity: Float
  remark: String
  totalPrice: Float
  unitPrice: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PurchaseOrderVoucher {
  Project: Project
  approvedBy: User
  approvedById: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  grandTotal: Float
  id: ID!
  items: [PurchaseOrderItem!]
  materialRequest: MaterialRequestVoucher
  materialRequestId: String
  preparedBy: User
  preparedById: String
  projectId: String
  serialNumber: String
  status: ApprovalStatus
  subTotal: Float
  supplierName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  vat: Float
}

type Query {
  generateDailySiteDataPdf(id: String!): String!
  generateDailyStockBalancePdf(id: String!): String!
  generateMaterialIssuePdf(id: String!): String!
  generateMaterialReceivePdf(id: String!): String!
  generateMaterialRequestPdf(id: String!): String!
  generateMaterialReturnPdf(id: String!): String!
  generateMaterialTransferPdf(id: String!): String!
  generatePurchaseOrderPdf(id: String!): String!
  getAllDocumentsStatus(projectId: String!): [DocumentTransaction!]!
  getAllWarehouseProductsStock(projectId: String!): [WarehouseProductStock!]!
  getCompanies(filterCompanyInput: FilterCompanyInput, orderBy: OrderByCompanyInput, paginationInput: PaginationInput): PaginationCompanies!
  getCompany(id: String!): Company!
  getDailySiteDataById(id: String!): DailySiteData!
  getDailySiteDatas(filterDailySiteDataInput: FilterDailySiteDataInput, mine: Boolean! = false, orderBy: OrderByDailySiteDataInput, paginationInput: PaginationInput): PaginationDailySiteData!
  getDailyStockBalaceById(id: String!): DailyStockBalance!
  getDailyStockBalances(filterDailyStockBalanceInput: FilterDailyStockBalanceInput, orderBy: OrderByDailyStockBalanceInput, paginationInput: PaginationInput): PaginationDailyStockBalances!
  getMaterialIssueById(id: String!): MaterialIssueVoucher!
  getMaterialIssues(filterMaterialIssueInput: FilterMaterialIssueInput, mine: Boolean! = false, orderBy: OrderByMaterialIssueInput, paginationInput: PaginationInput): PaginationMaterialIssues!
  getMaterialReceiveById(id: String!): MaterialReceiveVoucher!
  getMaterialReceives(filterMaterialReceiveInput: FilterMaterialReceiveInput, mine: Boolean! = false, orderBy: OrderByMaterialReceiveInput, paginationInput: PaginationInput): PaginationMaterialReceives!
  getMaterialRequestById(id: String!): MaterialRequestVoucher!
  getMaterialRequests(filterMaterialRequestInput: FilterMaterialRequestInput, mine: Boolean! = false, orderBy: OrderByMaterialRequestInput, paginationInput: PaginationInput): PaginationMaterialRequests!
  getMaterialReturnById(id: String!): MaterialReturnVoucher!
  getMaterialReturns(filterMaterialReturnInput: FilterMaterialReturnInput, mine: Boolean! = false, orderBy: OrderByMaterialReturnInput, paginationInput: PaginationInput): PaginationMaterialReturns!
  getMaterialTransferById(id: String!): MaterialTransferVoucher!
  getMaterialTransfers(filterMaterialTransferInput: FilterMaterialTransferInput, mine: Boolean! = false, orderBy: OrderByMaterialTransferInput, paginationInput: PaginationInput): PaginationMaterialTransfers!
  getMe: User!
  getMilestone(id: String!): Milestone!
  getMilestones(filterMilestoneInput: FilterMilestoneInput, orderBy: OrderByMilestoneInput, paginationInput: PaginationInput): PaginationMilestones!
  getPriceHistory(id: String!): PriceHistory!
  getProduct(id: String!): Product!
  getProductPriceHistories(filterPriceHistoryInput: FilterPriceHistoryInput, orderBy: OrderByPriceHistoryInput, paginationInput: PaginationInput): PaginationPriceHistories!
  getProductVariant(id: String!): ProductVariant!
  getProductVariants(filterProductVariantInput: FilterProductVariantInput, orderBy: OrderByProductVariantInput, paginationInput: PaginationInput): PaginationProductVariants!
  getProducts(filterProductInput: FilterProductInput, orderBy: OrderByProductInput, paginationInput: PaginationInput): PaginationProducts!
  getProformaById(id: String!): Proforma!
  getProformas(filterProformaInput: FilterProformaInput, orderBy: OrderByProformaInput, paginationInput: PaginationInput): PaginationProformas!
  getProject(id: String!): Project!
  getProjects(filterProjectInput: FilterProjectInput, orderBy: OrderByProjectInput, paginationInput: PaginationInput): PaginationProjects!
  getPurchaseOrderById(id: String!): PurchaseOrderVoucher!
  getPurchaseOrders(filterPurchaseOrderInput: FilterPurchaseOrderInput, mine: Boolean! = false, orderBy: OrderByPurchaseOrderInput, paginationInput: PaginationInput): PaginationPurchaseOrders!
  getTask(id: String!): Task!
  getTasks(filterTaskInput: FilterTaskInput, orderBy: OrderByTaskInput, paginationInput: PaginationInput): PaginationTasks!
  getUserByEmail(email: String!): User!
  getUserByPhoneNumber(phone_number: String!): User!
  getUsers: [User!]!
  getWarehouseProduct(id: String!): WarehouseProduct!
  getWarehouseProducts(filterWarehouseProductInput: FilterWarehouseProductInput, orderBy: OrderByWarehouseProductInput, paginationInput: PaginationInput): PaginationWarehouseProducts!
  getWarehouseStore(id: String!): WarehouseStore!
  getWarehouseStores(filterWarehouseStoreInput: FilterWarehouseStoreInput, orderBy: OrderByWarehouseStoreInput, paginationInput: PaginationInput): PaginationWarehouseStores!
}

input RegistrationInput {
  confirmPassword: String!
  password: String!
  token: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  mode: String = "insensitive"
  not: String
  startsWith: String
}

enum SubStructureUseDescription {
  CONCRETE_WORK
  EXCAVATION_AND_EARTH_WORK
  MASONRY_WORK
}

enum SuperStructureUseDescription {
  BLOCK_WORK
  CARPENTRY_AND_JOINERY
  CONCRETE_WORK
  ELECTRICAL_INSTALLATION
  FINISHING_WORK
  MECHANICAL_INSTALLATION
  METAL_WORK
  PAINTING_WORK
  PLASTERING_WORK
  ROOFING
  SANITARY_INSTALLATION
}

type Task {
  Milestone: Milestone
  assignedTo: User
  assignedToId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: ID!
  milestoneId: String
  name: String
  priority: Priority
  status: CompletionStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

"""Possible variations of unit of measure"""
enum UnitOfMeasure {
  BERGA
  KG
  LITER
  M2
  M3
  PACKET
  PCS
  QUINTAL
}

input UpdateCompanyInput {
  address: String
  contactInfo: String
  name: String
  ownerId: String
}

input UpdateDailySiteDataInput {
  approvedById: String
  checkedById: String
  contractor: String
  date: DateTime
  id: String!
  preparedById: String
  projectId: String
  status: ApprovalStatus
  tasks: [UpdateDailySiteDataTaskInput!]
}

input UpdateDailySiteDataTaskInput {
  description: String
  executedQuantity: Float
  id: String!
  laborDetails: [UpdateDailySiteDataTaskLaborInput!]
  materialDetails: [UpdateDailySiteDataTaskMaterialInput!]
  unit: String
}

input UpdateDailySiteDataTaskLaborInput {
  afternoon: Float
  id: String!
  morning: Float
  number: Float
  overtime: Float
  trade: String
}

input UpdateDailySiteDataTaskMaterialInput {
  id: String!
  productVariantId: String
  quantityUsed: Float
  quantityWasted: Float
}

input UpdateMaterialIssueInput {
  approved: ApprovalStatus
  approvedById: String
  id: String!
  items: [UpdateMaterialIssueItemInput!]
  preparedById: String
  projectId: String
  requisitionNumber: String
  warehouseStoreId: String
}

input UpdateMaterialIssueItemInput {
  productVariantId: String
  quantity: Float
  remark: String
  subStructureDescription: SubStructureUseDescription
  superStructureDescription: SuperStructureUseDescription
  totalCost: Float
  unitCost: Float
  useType: UseType
}

input UpdateMaterialReceiveInput {
  approvedById: String
  id: String!
  invoiceId: String
  items: [UpdateMaterialReceiveItemInput!]
  materialRequestId: String
  projectId: String
  purchaseOrderId: String
  purchasedById: String
  status: ApprovalStatus
  supplierName: String
}

input UpdateMaterialReceiveItemInput {
  loadingCost: Float
  productVariantId: String
  quantity: Float
  totalCost: Float
  transportationCost: Float
  unitCost: Float
  unloadingCost: Float
}

input UpdateMaterialRequestInput {
  approvedById: String
  id: String!
  items: [UpdateMaterialRequestItemInput!]
  projectId: String
  requestedById: String
  status: ApprovalStatus
}

input UpdateMaterialRequestItemInput {
  productVariantId: String
  quantity: Float
  remark: String
}

input UpdateMaterialReturnInput {
  id: String!
  items: [UpdateMaterialReturnItemInput!]
  projectId: String
  receivedById: String
  receivingWarehouseStoreId: String
  returnedById: String
  status: String
}

input UpdateMaterialReturnItemInput {
  issueVoucherId: String
  productVariantId: String
  quantity: Float
  remark: String
  totalCost: Float
  unitCost: Float
}

input UpdateMaterialTransferInput {
  approvedById: String
  id: String!
  items: [UpdateMaterialTransferItemInput!]
  materialGroup: String
  materialReceiveId: String
  preparedById: String
  projectId: String
  receivingWarehouseStoreId: String
  requisitionNumber: String
  sendingWarehouseStoreId: String
  sentThroughName: String
  vehiclePlateNo: String
}

input UpdateMaterialTransferItemInput {
  productVariantId: String
  quantityRequested: Float
  quantityTransferred: Float
  remark: String
  totalCost: Float
  unitCost: Float
}

input UpdateMilestoneInput {
  createdById: String
  description: String
  dueDate: DateTime
  id: String!
  name: String
  projectId: String
  stage: UseType
}

input UpdatePriceHistoryInput {
  price: Float
  productVariantId: String
  projectId: String
}

input UpdateProductInput {
  name: String
  productType: String
}

input UpdateProductVariantInput {
  description: String
  productId: String
  unitOfMeasure: UnitOfMeasure
  variant: String
}

input UpdateProformaInput {
  approvedById: String
  id: String!
  materialRequestItemId: String
  photo: String
  preparedById: String
  projectId: String
  remark: String
  status: ApprovalStatus
  vendor: String
}

input UpdateProjectInput {
  budget: Float
  companyId: String
  endDate: DateTime
  name: String
  projectUsers: [UpdateProjectUserInput!]
  startDate: DateTime
  status: String
}

input UpdateProjectUserInput {
  projectId: String
  userId: String
}

input UpdatePurchaseOrderInput {
  approvedById: String
  grandTotal: Float
  id: String!
  items: [UpdatePurchaseOrderItemInput!]!
  materialRequestId: String
  preparedById: String
  projectId: String
  status: ApprovalStatus
  subTotal: Float
  supplierName: String
  vat: Float
}

input UpdatePurchaseOrderItemInput {
  productVariantId: String
  quantity: Float
  quantityRequested: Float
  remark: String
  totalPrice: Float
  unitPrice: Float
}

input UpdateTaskInput {
  assignedToId: String
  description: String
  dueDate: DateTime
  id: String!
  milestoneId: String
  name: String
  priority: Priority
  startDate: DateTime
  status: CompletionStatus
}

input UpdateUserInput {
  companyId: String
  email: String
  fullName: String
  phoneNumber: String
  role: UserRole
}

input UpdateWarehouseProductInput {
  currentPrice: Float
  productVariantId: String
  projectId: String
  quantity: Float
  warehouseId: String
}

input UpdateWarehouseStoreInput {
  companyId: String
  location: String
  name: String
  warehouseStoreManagerIds: [UpdateWarehouseStoreManagerInput!]
}

input UpdateWarehouseStoreManagerInput {
  storeManagerId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

enum UseType {
  SUB_STRUCTURE
  SUPER_STRUCTURE
}

type User {
  company: Company

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  fullName: String!
  id: ID!
  phoneNumber: String!
  role: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  CLIENT
  CONSULTANT
  OWNER
  PROJECT_MANAGER
  PURCHASER
  SITE_MANAGER
  STORE_MANAGER
}

type WarehouseProduct {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  currentPrice: Float
  id: ID!
  productVariant: ProductVariant
  productVariantId: String
  project: Project
  projectId: String
  quantity: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouse: WarehouseStore
  warehouseId: String
}

type WarehouseProductStock {
  currentPrice: Float
  productVariant: ProductVariant
  quantity: Float
}

type WarehouseStore {
  company: Company
  companyId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  location: String
  name: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseStoreManagers: [WarehouseStoreManager!]
}

type WarehouseStoreManager {
  StoreManager: User
  WarehouseStore: WarehouseStore

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  storeManagerId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  warehouseStoreId: String
}