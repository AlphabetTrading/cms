generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id                               String                   @id @default(uuid())
  fullName                         String
  email                            String                   @unique
  phoneNumber                      String                   @unique
  password                         String
  role                             UserRole
  createdAt                        DateTime                 @default(now())
  updatedAt                        DateTime                 @updatedAt
  PurchaseOrder                    PurchaseOrder[]          @relation("PreparedBy")
  PurchaseOrdersApproved           PurchaseOrder[]          @relation("ApprovedBy")
  MaterialIssueVouchers            MaterialIssueVoucher[]   @relation("IssuedTo")
  MaterialIssueVouchersPrepared    MaterialIssueVoucher[]   @relation("PreparedByIssue")
  MaterialIssueVouchersApproved    MaterialIssueVoucher[]   @relation("ApprovedByIssue")
  MaterialReceiveVouchers          MaterialReceiveVoucher[] @relation("PurchasedBy")
  MaterialReceiveVouchersApproved  MaterialReceiveVoucher[] @relation("ApprovedByReceive")
  MaterialRequestVouchersRequested MaterialRequestVoucher[] @relation("RequestedBy")
  MaterialRequestVouchersApproved  MaterialRequestVoucher[] @relation("ApprovedByRequest")
  MaterialReturnVouchers           MaterialReturnVoucher[]  @relation("ReturnedByReturn")
  MaterialReturnVouchersReceived   MaterialReturnVoucher[]  @relation("ReceivedByReturn")
  MaterialIssueVoucher             MaterialIssueVoucher[]
  MaterialReturnVoucher            MaterialReturnVoucher[]
  Project                          Project[]
  ProjectProjectManager            Project[]                @relation("ProjectManager")
  Task                             Task[]
}

model Product {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String?
  WarehouseProduct WarehouseProduct[]
  PriceHistory     PriceHistory[]
}

model WarehouseStore {
  id             String             @id @default(uuid())
  name           String
  location       String
  products       WarehouseProduct[]
  purchaseOrders PurchaseOrder[]

  @@unique([name, location])
}

model WarehouseProduct {
  id          String         @id @default(uuid())
  productId   String
  product     Product        @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   WarehouseStore @relation(fields: [warehouseId], references: [id])
  quantity    Float

  @@unique([productId, warehouseId])
}

model PriceHistory {
  id        String  @id @default(uuid())
  productId String  
  product   Product @relation(fields: [productId], references: [id])
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proforma {
  id                String                 @id @default(uuid())
  serialNumber      String                 @unique
  vendor            String
  description       String?
  photos            String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  materialRequestId String
  materialRequest   MaterialRequestVoucher @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id                      String                   @id @default(uuid())
  serialNumber            String                   @unique
  projectDetails          String?
  supplierName            String
  materialRequestId       String
  materialRequest         MaterialRequestVoucher   @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
  items                   PurchaseOrderItem[]      @relation(name: "items")
  subTotal                Float
  vat                     Float?
  grandTotal              Float?
  preparedById            String
  preparedBy              User                     @relation(fields: [preparedById], references: [id], name: "PreparedBy")
  approvedById            String
  approvedBy              User                     @relation(fields: [approvedById], references: [id], name: "ApprovedBy")
  status                  ApprovalStatus           @default(PENDING)
  dateOfReceiving         DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  MaterialReceiveVouchers MaterialReceiveVoucher[]
  WarehouseStore          WarehouseStore?          @relation(fields: [warehouseStoreId], references: [id])
  warehouseStoreId        String?
}

model PurchaseOrderItem {
  id                String        @id @default(uuid())
  listNo            Int
  description       String?
  unitOfMeasure     String
  quantityRequested Float
  unitPrice         Float
  totalPrice        Float
  remark            String?
  PurchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], name: "items")
  purchaseOrderId   String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([id, listNo])
}

model MaterialReturnVoucher {
  id             String              @id @default(uuid())
  serialNumber   String              @unique
  from           String
  receivingStore String
  items          ReturnVoucherItem[]
  returnedById   String
  returnedBy     User                @relation(fields: [returnedById], references: [id], name: "ReturnedByReturn")
  receivedById   String
  receivedBy     User                @relation(fields: [receivedById], references: [id], name: "ReceivedByReturn")
  status         ApprovalStatus      @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model ReturnVoucherItem {
  id                      String                @id @default(uuid())
  listNo                  Int
  description             String?
  issueVoucherId          String
  issueVoucher            MaterialIssueVoucher  @relation(fields: [issueVoucherId], references: [id], onDelete: Cascade)
  unitOfMeasure           String
  quantityReturned        Float
  unitCost                Float
  totalCost               Float
  remark                  String?
  materialReturnVoucherId String
  MaterialReturnVoucher   MaterialReturnVoucher @relation(fields: [materialReturnVoucherId], references: [id])
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  @@unique([id, listNo])
}

model MaterialIssueVoucher {
  id                String              @id @default(uuid())
  serialNumber      String              @unique
  projectDetails    String?
  issuedToId        String
  issuedTo          User                @relation(fields: [issuedToId], references: [id], name: "IssuedTo")
  requisitionNumber String?
  items             IssueVoucherItem[]  @relation(name: "items")
  preparedById      String
  preparedBy        User                @relation(fields: [preparedById], references: [id], name: "PreparedByIssue")
  approvedById      String
  approvedBy        User                @relation(fields: [approvedById], references: [id], name: "ApprovedByIssue")
  status            ApprovalStatus      @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ReturnVoucherItem ReturnVoucherItem[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
}

model IssueVoucherItem {
  id                     String               @id @default(uuid())
  listNo                 Int
  description            String?
  unitOfMeasure          String
  quantity               Float
  unitCost               Float
  totalCost              Float
  remark                 String?
  materialIssueVoucherId String
  MaterialIssueVoucher   MaterialIssueVoucher @relation(name: "items", fields: [materialIssueVoucherId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@unique([id, listNo])
}

model MaterialReceiveVoucher {
  id                String                 @id @default(uuid())
  serialNumber      String                 @unique
  projectDetails    String?
  supplierName      String
  invoiceId         String
  materialRequestId String
  materialRequest   MaterialRequestVoucher @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder          @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  items             MaterialReceiveItem[]
  purchasedById     String
  purchasedBy       User                   @relation(fields: [purchasedById], references: [id], name: "PurchasedBy")
  approvedById      String
  approvedBy        User                   @relation(fields: [approvedById], references: [id], name: "ApprovedByReceive")
  status            ApprovalStatus         @default(PENDING)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model MaterialReceiveItem {
  id                       String                 @id @default(uuid())
  listNo                   Int
  description              String?
  unitOfMeasure            String
  quantity                 Float
  unitCost                 Float
  totalCost                Float
  materialReceiveVoucherId String
  MaterialReceiveVoucher   MaterialReceiveVoucher @relation(fields: [materialReceiveVoucherId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@unique([id, listNo])
}

model MaterialRequestVoucher {
  id                      String                   @id @default(uuid())
  serialNumber            String                   @unique
  from                    String
  to                      String
  items                   MaterialRequestItem[]    @relation(name: "items")
  requestedById           String
  requestedBy             User                     @relation(fields: [requestedById], references: [id], name: "RequestedBy")
  approvedById            String
  approvedBy              User                     @relation(fields: [approvedById], references: [id], name: "ApprovedByRequest")
  status                  ApprovalStatus           @default(PENDING)
  PurchaseOrders          PurchaseOrder[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  MaterialReceiveVouchers MaterialReceiveVoucher[]
  Proforma                Proforma[]
}

model MaterialRequestItem {
  id                       String                 @id @default(uuid())
  listNo                   Int
  description              String?
  unitOfMeasure            String
  quantity                 Float
  inStockQuantity          Float?
  toBePurchasedQuantity    Float?
  remark                   String?
  materialRequestVoucherId String
  MaterialRequestVoucher   MaterialRequestVoucher @relation(name: "items", fields: [materialRequestVoucherId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@unique([id, listNo])
}

model Project {
  id               String      @id @default(uuid())
  name             String      @unique
  startDate        DateTime
  endDate          DateTime?
  budget           Float
  client           User        @relation(fields: [clientId], references: [id])
  clientId         String
  projectManager   User        @relation(fields: [projectManagerId], references: [id], name: "ProjectManager")
  projectManagerId String
  status           String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Milestones       Milestone[]
}

model Milestone {
  id          String   @id @default(uuid())
  name        String
  description String?
  dueDate     DateTime
  status      String
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tasks       Task[]

  @@unique([name, projectId])
}

model Task {
  id           String    @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  dueDate      DateTime
  status       String
  priority     String
  assignedTo   User      @relation(fields: [assignedToId], references: [id])
  assignedToId String
  milestoneId  String
  Milestone    Milestone @relation(fields: [milestoneId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([name, milestoneId])
}

enum UserRole {
  CLIENT
  PROJECT_MANAGER
  CONSULTANT
  SITE_MANAGER
  PURCHASER
  STORE_MANAGER
}

enum ApprovalStatus {
  PENDING
  COMPLETED
  DECLINED
}
