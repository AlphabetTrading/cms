generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id                               String                    @id @default(uuid())
  fullName                         String
  email                            String                    @unique
  phoneNumber                      String                    @unique
  password                         String
  role                             UserRole
  createdAt                        DateTime                  @default(now())
  updatedAt                        DateTime                  @updatedAt
  PurchaseOrder                    PurchaseOrder[]           @relation("PreparedBy")
  PurchaseOrdersApproved           PurchaseOrder[]           @relation("ApprovedBy")
  MaterialIssueVouchersPrepared    MaterialIssueVoucher[]    @relation("PreparedByIssue")
  MaterialIssueVouchersApproved    MaterialIssueVoucher[]    @relation("ApprovedByIssue")
  MaterialReceiveVouchers          MaterialReceiveVoucher[]  @relation("PurchasedBy")
  MaterialReceiveVouchersApproved  MaterialReceiveVoucher[]  @relation("ApprovedByReceive")
  MaterialRequestVouchersRequested MaterialRequestVoucher[]  @relation("RequestedBy")
  MaterialRequestVouchersApproved  MaterialRequestVoucher[]  @relation("ApprovedByRequest")
  MaterialReturnVouchers           MaterialReturnVoucher[]   @relation("ReturnedByReturn")
  MaterialReturnVouchersReceived   MaterialReturnVoucher[]   @relation("ReceivedByReturn")
  MaterialTransferVoucherPrepared  MaterialTransferVoucher[] @relation("PreparedByTransfer")
  MaterialTransferVoucherApproved  MaterialTransferVoucher[] @relation("ApprovedByTransfer")
  ProjectClient                    Project[]                 @relation("Client")
  ProjectProjectManager            Project[]                 @relation("ProjectManager")
  Task                             Task[]
  ProjectUser                      ProjectUser[]
  WarehouseStoreManager            WarehouseStoreManager[]
  DailySiteDataPrepared            DailySiteData[]           @relation("PreparedByDailySiteData")
  DailySiteDataChecked             DailySiteData[]           @relation("CheckedByDailySiteData")
  DailySiteDataApproved            DailySiteData[]           @relation("ApprovedByDailySiteData")
}

model ProjectUser {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Product {
  id             String           @id @default(uuid())
  name           String           @unique
  productType    ProductType
  ProductVariant ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id                         String                       @id @default(uuid())
  productId                  String
  product                    Product                      @relation(fields: [productId], references: [id])
  variant                    String
  description                String?
  unitOfMeasure              UnitOfMeasure
  PriceHistory               PriceHistory[]
  WarehouseProduct           WarehouseProduct[]
  MaterialRequestItem        MaterialRequestItem[]
  MaterialReceiveItem        MaterialReceiveItem[]
  ReturnVoucherItem          ReturnVoucherItem[]
  PurchaseOrderItem          PurchaseOrderItem[]
  MaterialTransferItem       MaterialTransferItem[]
  DailySiteDataTaskMaterial  DailySiteDataTaskMaterial[]
  DailySiteDataTaskEquipment DailySiteDataTaskEquipment[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  IssueVoucherItem IssueVoucherItem[]

  @@unique([productId, variant])
}

model WarehouseStore {
  id                     String                   @id @default(uuid())
  name                   String
  location               String
  products               WarehouseProduct[]
  MaterialReceiveVoucher MaterialReceiveVoucher[]
  MaterialIssueVoucher   MaterialIssueVoucher[]
  WarehouseStoreManager  WarehouseStoreManager[]

  createdAt                        DateTime                  @default(now())
  updatedAt                        DateTime                  @updatedAt
  MaterialReturnVoucher            MaterialReturnVoucher[]
  MaterialTransferVoucherSending   MaterialTransferVoucher[] @relation("SendingWarehouseStore")
  MaterialTransferVoucherReceiving MaterialTransferVoucher[] @relation("ReceivingWarehouseStore")

  @@unique([name, location])
}

model WarehouseStoreManager {
  id               String         @id @default(uuid())
  warehouseStoreId String
  WarehouseStore   WarehouseStore @relation(fields: [warehouseStoreId], references: [id])
  storeManagerId   String
  StoreManager     User           @relation(fields: [storeManagerId], references: [id])

  @@unique([warehouseStoreId, storeManagerId])
}

model WarehouseProduct {
  id               String         @id @default(uuid())
  quantity         Float
  currentPrice     Float
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  warehouseId      String
  warehouse        WarehouseStore @relation(fields: [warehouseId], references: [id])
  projectId        String
  project          Project        @relation(fields: [projectId], references: [id])
  version          Int            @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productVariantId, warehouseId, projectId])
}

model PriceHistory {
  id               String         @id @default(uuid())
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  projectId        String
  project          Project        @relation(fields: [projectId], references: [id])
  price            Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId, projectId])
}

model Proforma {
  id                String                 @id @default(uuid())
  serialNumber      String                 @unique
  projectId         String
  Project           Project                @relation(fields: [projectId], references: [id])
  vendor            String
  description       String?
  photos            String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  materialRequestId String
  materialRequest   MaterialRequestVoucher @relation(fields: [materialRequestId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model PurchaseOrder {
  id                      String                   @id @default(uuid())
  serialNumber            String                   @unique
  projectId               String
  Project                 Project                  @relation(fields: [projectId], references: [id])
  supplierName            String
  subTotal                Float
  vat                     Float?
  grandTotal              Float?
  items                   PurchaseOrderItem[]      @relation(name: "items")
  status                  ApprovalStatus           @default(PENDING)
  materialRequestId       String
  materialRequest         MaterialRequestVoucher   @relation(fields: [materialRequestId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  preparedById            String
  preparedBy              User                     @relation(fields: [preparedById], references: [id], name: "PreparedBy")
  approvedById            String?
  approvedBy              User?                    @relation(fields: [approvedById], references: [id], name: "ApprovedBy")
  MaterialReceiveVouchers MaterialReceiveVoucher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderItem {
  id               String         @id @default(uuid())
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Float
  unitPrice        Float
  totalPrice       Float
  remark           String?
  PurchaseOrder    PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id], name: "items")
  purchaseOrderId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model MaterialReturnVoucher {
  id                        String              @id @default(uuid())
  serialNumber              String              @unique
  projectId                 String
  Project                   Project             @relation(fields: [projectId], references: [id])
  receivingWarehouseStoreId String
  receivingWarehouseStore   WarehouseStore      @relation(fields: [receivingWarehouseStoreId], references: [id])
  items                     ReturnVoucherItem[]
  status                    ApprovalStatus      @default(PENDING)
  returnedById              String
  returnedBy                User                @relation(fields: [returnedById], references: [id], name: "ReturnedByReturn")
  receivedById              String?
  receivedBy                User?               @relation(fields: [receivedById], references: [id], name: "ReceivedByReturn")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReturnVoucherItem {
  id                      String                @id @default(uuid())
  productVariantId        String
  productVariant          ProductVariant        @relation(fields: [productVariantId], references: [id])
  issueVoucherId          String
  issueVoucher            MaterialIssueVoucher  @relation(fields: [issueVoucherId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quantity                Float
  unitCost                Float
  totalCost               Float
  remark                  String?
  materialReturnVoucherId String
  MaterialReturnVoucher   MaterialReturnVoucher @relation(fields: [materialReturnVoucherId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model MaterialIssueVoucher {
  id                String              @id @default(uuid())
  serialNumber      String              @unique
  projectId         String
  Project           Project             @relation(fields: [projectId], references: [id])
  warehouseStoreId  String
  warehouseStore    WarehouseStore      @relation(fields: [warehouseStoreId], references: [id])
  requisitionNumber String?
  items             IssueVoucherItem[]  @relation(name: "items")
  status            ApprovalStatus      @default(PENDING)
  preparedById      String
  preparedBy        User                @relation(fields: [preparedById], references: [id], name: "PreparedByIssue")
  approvedById      String?
  approvedBy        User?               @relation(fields: [approvedById], references: [id], name: "ApprovedByIssue")
  ReturnVoucherItem ReturnVoucherItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueVoucherItem {
  id                        String                        @id @default(uuid())
  productVariantId          String
  productVariant            ProductVariant                @relation(fields: [productVariantId], references: [id])
  useType                   UseType
  subStructureDescription   SubStructureUseDescription?
  superStructureDescription SuperStructureUseDescription?
  quantity                  Float
  unitCost                  Float
  totalCost                 Float
  remark                    String?
  materialIssueVoucherId    String
  MaterialIssueVoucher      MaterialIssueVoucher          @relation(name: "items", fields: [materialIssueVoucherId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model MaterialReceiveVoucher {
  id                String                 @id @default(uuid())
  serialNumber      String                 @unique
  projectId         String
  Project           Project                @relation(fields: [projectId], references: [id])
  supplierName      String
  invoiceId         String
  items             MaterialReceiveItem[]
  status            ApprovalStatus         @default(PENDING)
  materialRequestId String
  materialRequest   MaterialRequestVoucher @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder          @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchasedById     String
  purchasedBy       User                   @relation(fields: [purchasedById], references: [id], name: "PurchasedBy")
  approvedById      String?
  approvedBy        User?                  @relation(fields: [approvedById], references: [id], name: "ApprovedByReceive")
  WarehouseStore    WarehouseStore?        @relation(fields: [warehouseStoreId], references: [id])
  warehouseStoreId  String?

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  MaterialTransferVoucher MaterialTransferVoucher[]
}

model MaterialReceiveItem {
  id                       String                 @id @default(uuid())
  productVariantId         String
  productVariant           ProductVariant         @relation(fields: [productVariantId], references: [id])
  quantity                 Float
  unitCost                 Float
  totalCost                Float
  unloadingCost            Float
  loadingCost              Float
  transportationCost       Float
  materialReceiveVoucherId String
  MaterialReceiveVoucher   MaterialReceiveVoucher @relation(fields: [materialReceiveVoucherId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model MaterialTransferVoucher {
  id                        String                 @id @default(uuid())
  serialNumber              String                 @unique
  projectId                 String
  Project                   Project                @relation(fields: [projectId], references: [id])
  requisitionNumber         String?
  materialGroup             String?
  sendingWarehouseStoreId   String?
  receivingWarehouseStoreId String?
  sendingWarehouseStore     WarehouseStore?        @relation(fields: [sendingWarehouseStoreId], references: [id], name: "SendingWarehouseStore")
  receivingWarehouseStore   WarehouseStore?        @relation(fields: [receivingWarehouseStoreId], references: [id], name: "ReceivingWarehouseStore")
  vehiclePlateNo            String?
  materialReceiveId         String
  materialReceive           MaterialReceiveVoucher @relation(fields: [materialReceiveId], references: [id], onDelete: Cascade)
  items                     MaterialTransferItem[]
  preparedById              String
  preparedBy                User                   @relation(fields: [preparedById], references: [id], name: "PreparedByTransfer")
  approvedById              String?
  approvedBy                User?                  @relation(fields: [approvedById], references: [id], name: "ApprovedByTransfer")
  sentThroughName           String?
  status                    ApprovalStatus         @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaterialTransferItem {
  id                        String                   @id @default(uuid())
  productVariantId          String
  productVariant            ProductVariant           @relation(fields: [productVariantId], references: [id])
  quantityRequested         Float?
  quantityTransferred       Float
  unitCost                  Float
  totalCost                 Float
  remark                    String?
  MaterialTransferVoucher   MaterialTransferVoucher? @relation(fields: [materialTransferVoucherId], references: [id])
  materialTransferVoucherId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model MaterialRequestVoucher {
  id                      String                   @id @default(uuid())
  serialNumber            String                   @unique
  projectId               String
  Project                 Project                  @relation(fields: [projectId], references: [id])
  items                   MaterialRequestItem[]    @relation(name: "items")
  status                  ApprovalStatus           @default(PENDING)
  requestedById           String
  requestedBy             User                     @relation(fields: [requestedById], references: [id], name: "RequestedBy")
  approvedById            String?
  approvedBy              User?                    @relation(fields: [approvedById], references: [id], name: "ApprovedByRequest")
  PurchaseOrders          PurchaseOrder[]
  MaterialReceiveVouchers MaterialReceiveVoucher[]
  Proforma                Proforma[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaterialRequestItem {
  id                       String                 @id @default(uuid())
  productVariantId         String
  productVariant           ProductVariant         @relation(fields: [productVariantId], references: [id])
  quantity                 Float
  remark                   String?
  materialRequestVoucherId String
  MaterialRequestVoucher   MaterialRequestVoucher @relation(name: "items", fields: [materialRequestVoucherId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model DailyStockBalance {
  id        String  @id @default(uuid())
  projectId String
  Project   Project @relation(fields: [projectId], references: [id])
  changes   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailySiteData {
  id           String              @id @default(uuid())
  projectId    String
  Project      Project             @relation(fields: [projectId], references: [id])
  contractor   String?
  tasks        DailySiteDataTask[]
  preparedById String
  preparedBy   User                @relation(fields: [preparedById], references: [id], name: "PreparedByDailySiteData")
  checkedById  String?
  checkedBy    User?               @relation(fields: [checkedById], references: [id], name: "CheckedByDailySiteData")
  approvedById String?
  approvedBy   User?               @relation(fields: [approvedById], references: [id], name: "ApprovedByDailySiteData")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailySiteDataTask {
  id               String                       @id @default(uuid())
  executedBy       String?
  description      String
  executedQuantity Float?
  unit             String?
  laborDetails     DailySiteDataTaskLabor[]
  materialDetails  DailySiteDataTaskMaterial[]
  equipmentDetails DailySiteDataTaskEquipment[]
  dailySiteDataId  String
  DailySiteData    DailySiteData                @relation(fields: [dailySiteDataId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailySiteDataTaskLabor {
  id                  String            @id @default(uuid())
  trade               String?
  morning             Float?
  afternoon           Float?
  overtime            Float?
  dailySiteDataTaskId String
  DailySiteDataTask   DailySiteDataTask @relation(fields: [dailySiteDataTaskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, trade])
}

model DailySiteDataTaskMaterial {
  id                  String            @id @default(uuid())
  productVariantId    String
  productVariant      ProductVariant    @relation(fields: [productVariantId], references: [id])
  quantity            Float
  dailySiteDataTaskId String
  DailySiteDataTask   DailySiteDataTask @relation(fields: [dailySiteDataTaskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model DailySiteDataTaskEquipment {
  id                  String            @id @default(uuid())
  productVariantId    String
  productVariant      ProductVariant    @relation(fields: [productVariantId], references: [id])
  quantity            Float
  morning             Float?
  afternoon           Float?
  dailySiteDataTaskId String
  DailySiteDataTask   DailySiteDataTask @relation(fields: [dailySiteDataTaskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, productVariantId])
}

model Project {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  startDate               DateTime
  endDate                 DateTime?
  budget                  Float
  Client                  User                      @relation(fields: [clientId], references: [id], name: "Client")
  clientId                String
  ProjectManager          User                      @relation(fields: [projectManagerId], references: [id], name: "ProjectManager")
  projectManagerId        String
  ProjectUsers            ProjectUser[]
  status                  String
  Milestones              Milestone[]
  PurchaseOrder           PurchaseOrder[]
  MaterialReturnVoucher   MaterialReturnVoucher[]
  MaterialIssueVoucher    MaterialIssueVoucher[]
  MaterialReceiveVoucher  MaterialReceiveVoucher[]
  MaterialRequestVoucher  MaterialRequestVoucher[]
  MaterialTransferVoucher MaterialTransferVoucher[]
  Proforma                Proforma[]
  PriceHistory            PriceHistory[]
  WarehouseProduct        WarehouseProduct[]
  DailyStockBalance       DailyStockBalance[]
  DailySiteData           DailySiteData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Milestone {
  id          String   @id @default(uuid())
  name        String
  description String?
  dueDate     DateTime
  status      String
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  Tasks       Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, projectId])
}

model Task {
  id           String    @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  dueDate      DateTime
  status       String
  priority     String
  assignedTo   User      @relation(fields: [assignedToId], references: [id])
  assignedToId String
  milestoneId  String
  Milestone    Milestone @relation(fields: [milestoneId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, milestoneId])
}

enum UserRole {
  CLIENT
  PROJECT_MANAGER
  CONSULTANT
  SITE_MANAGER
  PURCHASER
  STORE_MANAGER
}

enum ApprovalStatus {
  PENDING
  COMPLETED
  DECLINED
}

enum ProductType {
  CONSTRUCTION
  SANITARY
  ELECTRICAL
}

enum UseType {
  SUB_STRUCTURE
  SUPER_STRUCTURE
}

enum UnitOfMeasure {
  KG
  BERGA
  QUINTAL
  M2
  M3
  LITER
  PCS
  PACKET
}

enum SubStructureUseDescription {
  EXCAVATION_AND_EARTH_WORK
  CONCRETE_WORK
  MASONRY_WORK
}

enum SuperStructureUseDescription {
  CONCRETE_WORK
  BLOCK_WORK
  ROOFING
  CARPENTRY_AND_JOINERY
  METAL_WORK
  PLASTERING_WORK
  FINISHING_WORK
  PAINTING_WORK
  SANITARY_INSTALLATION
  ELECTRICAL_INSTALLATION
  MECHANICAL_INSTALLATION
}
